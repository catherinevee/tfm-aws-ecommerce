# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*
*.tfplan
*.tfplan.json

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore lock files (optional - you may want to include these)
# .terraform.lock.hcl

# Ignore any local backup files
*.backup
*.backup.*

# Ignore any temporary files
*.tmp
*.temp

# Ignore any log files
*.log

# Ignore any environment-specific files
.env
.env.local
.env.production
.env.staging

# Ignore any IDE-specific files
.vscode/
.idea/
*.swp
*.swo
*~

# Ignore any OS-specific files
.DS_Store
Thumbs.db

# Ignore any test coverage files
coverage/
*.coverage

# Ignore any build artifacts
build/
dist/
*.zip

# Ignore any node modules (if using Node.js for Lambda functions)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Ignore any Python cache files
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/

# Ignore any Go build files
*.exe
*.exe~
*.dll
*.so
*.dylib
*.test
*.out
go.work 